""" Ejercitación de la clase 1 

    Para realizar la practica debera clonar el repositorio.
    Seguidamente crear una rama con su: "nombre-apellido", 
    luego crear una carpeta con su: "nombre_apellido" y dentro 
    creara los modulos de clase y testing.

    Ejemplo:

        >>> niko@desktop:~/Python/POO-Python$  tree

            .
            ├── Clase_1
            │   ├── calculadora.py
            │   ├── contador.py
            │   ├── Ejercitacion.txt
            │   ├── overloading
            │   │   ├── overloading.png
            │   │   └── Teoria.txt
            │   ├── Teoria 1
            │   └── usuario.py
            ├── nicolas_paneblanco
            │   ├── fecha.py
            │   └── fecha_test.py
            ├── README.md
            └── __test__
                ├── calculadora_test.py
                ├── contador_test.py
                ├── Testing
                └── usuario_test.py

    Nota: para correr los test siguiendo la estructura antes especificada 
    debe hacer uso del shortcut: ctrl + shift + P 
    En el cuadro de busqueda que se abre escriba: Python: Configure Tests
    Seleccione framework: unittest
    Seleccione el directorio con su nombre_apellido
    Seleccione *_test.py 
    Por ultimo ya puede ir al icono de Testing y sus test estaran cargados 
    y listos para ejecutarse.

"""
______________________________________________________

"""
    Ejercicio 1:
        Modelar el objeto caja de ahorro:
            - un titular
            - un saldo
        
        y debera poder:
            - depositar un monto
            - extraer un monto
            - en el caso de querer extraer un monto superior 
              al monto disponiple arrojara una 
              excepcion ValueError("Imposible realizar extracción.")

        Realizar los test necesarios que validen 
        el comportamiento.  
"""

"""
    Ejercicio 2:
        Modelar el objeto fecha en donde tendra:
            - un dia 
            - un mes 
            - un anio 
        
        y debera poder compararse con otra fecha:
            - (<, >, <=, >=, ==)
            - esta entre "una_fecha" y "otra_fecha"

        Realizar los test necesarios que validen 
        el comportamiento.  
"""